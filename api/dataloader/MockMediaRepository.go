// Code generated by MockGen. DO NOT EDIT.
// Source: dataloader/MediaRepository.go
//
// Generated by this command:
//
//	mockgen -source=dataloader/MediaRepository.go -destination=dataloader/MockMediaRepository.go -package=dataloader
//

// Package dataloader is a generated GoMock package.
package dataloader

import (
	reflect "reflect"

	models "github.com/photoview/photoview/api/graphql/models"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMediaRepository is a mock of MediaRepository interface.
type MockMediaRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMediaRepositoryMockRecorder
}

// MockMediaRepositoryMockRecorder is the mock recorder for MockMediaRepository.
type MockMediaRepositoryMockRecorder struct {
	mock *MockMediaRepository
}

// NewMockMediaRepository creates a new mock instance.
func NewMockMediaRepository(ctrl *gomock.Controller) *MockMediaRepository {
	mock := &MockMediaRepository{ctrl: ctrl}
	mock.recorder = &MockMediaRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaRepository) EXPECT() *MockMediaRepositoryMockRecorder {
	return m.recorder
}

// FindMediaURLs mocks base method.
func (m *MockMediaRepository) FindMediaURLs(query func(*gorm.DB) *gorm.DB, mediaIDs []int) ([]*models.MediaURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMediaURLs", query, mediaIDs)
	ret0, _ := ret[0].([]*models.MediaURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMediaURLs indicates an expected call of FindMediaURLs.
func (mr *MockMediaRepositoryMockRecorder) FindMediaURLs(query, mediaIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMediaURLs", reflect.TypeOf((*MockMediaRepository)(nil).FindMediaURLs), query, mediaIDs)
}
