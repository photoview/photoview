name: Tests

on:
  push:
    branches: ['*']
  pull_request:
    branches: [master]

jobs:
  cleanup:
    name: Clean test images
    needs:
    - test-ui
    - test-api
    runs-on: ubuntu-latest
    steps:
    - name: Cleanup
      uses: actions/delete-package-versions@v5
      with:
        owner: '${{ github.repository_owner }}'
        token: '${{ secrets.GITHUB_TOKEN }}'
        package-type: 'container'
        package-name: photoview/test
        min-versions-to-keep: 5

  build-dep:
    name: Build test images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image: ['ui', 'api']
    env:
      image: ghcr.io/${{ github.repository }}/test:${{ matrix.image }}-${{ github.run_id }}

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build images
        uses: docker/build-push-action@v6
        with:
          pull: true
          push: true
          target: build-${{ matrix.image }}
          tags: ${{ env.image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-ui:
    name: Test UI
    needs:
    - build-dep
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}/test:ui-${{ github.run_id }}
    defaults:
      run:
        working-directory: ./ui

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Get npm cache directory
      id: npm-cache-dir
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

    - name: Cache NPM dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm clean-install

    - name: Test
      run: npm run test:ci

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        flags: ui

  test-api:
    name: Test API
    needs:
    - build-dep
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        database: ['sqlite', 'mysql', 'postgres']
    container:
      image: ghcr.io/${{ github.repository }}/test:api-${{ github.run_id }}
      env:
        PHOTOVIEW_SQLITE_PATH: photoview_test.db
        PHOTOVIEW_MYSQL_URL: photoview:photosecret@tcp(mysql)/photoview_test
        PHOTOVIEW_POSTGRES_URL: postgres://photoview:photosecret@postgres/photoview_test
    defaults:
      run:
        working-directory: ./api

    services:
      mysql:
        image: mariadb:10.5
        env:
          MYSQL_DATABASE: photoview_test
          MYSQL_USER: photoview
          MYSQL_PASSWORD: photosecret
          MYSQL_RANDOM_ROOT_PASSWORD: yes
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 3306:3306

      postgres:
        image: postgres:13.2
        env:
          POSTGRES_USER: photoview
          POSTGRES_PASSWORD: photosecret
          POSTGRES_DB: photoview_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Cache go build
      uses: actions/cache@v3
      with:
        path: /go/pkg
        key: ${{ runner.os }}-api-${{ hashFiles('**/go.mod', '**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-api-

    - name: Build API
      run: |
        go env
        go get -t -v ./...
        go build -v  -buildvcs=false ./...

    - name: Test API
      env:
        PHOTOVIEW_DATABASE_DRIVER: ${{ matrix.database }}
      run: |
        go test ./... -v -database -filesystem -p 1 -coverprofile=coverage-${{ matrix.database }}.txt -covermode=atomic

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        files: coverage-${{ matrix.database }}.txt
        flags: ui
